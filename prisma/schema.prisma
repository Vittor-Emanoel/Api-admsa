generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.png"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum Role {
//   ADMIN
//   FINANCE
//   SECRETARY
// }

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt()
  role         Role?          @relation(fields: [role_id], references: [id])
  role_id      String?
  user_role    UserRole[]
  organization Organization[]
  Church       Church[]

  @@map("users")
}

model Organization {
  id       String @id @default(uuid())
  name     String
  slug     String @unique
  owner_id String @unique

  churches Church[]

  user User @relation(fields: [owner_id], references: [id])

  @@map("organizations")
}

model Role {
  id         String     @id @default(uuid())
  name       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  users_role UserRole[]
  users      User[]

  @@map("roles")
}

//muitos usuarios podem ter muitos cargos
model UserRole {
  user_id String
  role_id String
  User    User   @relation(fields: [user_id], references: [id])
  Role    Role   @relation(fields: [role_id], references: [id])

  @@id([user_id, role_id])
  @@map("users_roles")
}

model Church {
  id              String  @id @default(uuid())
  name            String  @unique
  organization_Id String?
  owner_id        String
  description     String?

  members       Member[]
  address       ChurchAddress[]
  owner         User?           @relation(fields: [owner_id], references: [id])
  organization  Organization?   @relation(fields: [organization_Id], references: [id])
  MemberAddress MemberAddress[]

  @@map("churchs")
}

model ChurchAddress {
  id          String  @id @default(uuid())
  street      String
  houseNumber String
  postalCode  String
  church_id   String?
  church      Church? @relation(fields: [church_id], references: [id], onDelete: Cascade)

  @@map("church_address")
}

model Member {
  id       String @id @default(uuid())
  fullName String
  phone    String @unique

  address MemberAddress[]

  office_id String?
  church_id String?

  Office Office? @relation(fields: [office_id], references: [id])
  Church Church? @relation(fields: [church_id], references: [id])

  @@map("members")
}

model MemberAddress {
  id          String  @id @default(uuid())
  street      String
  houseNumber String
  postalCode  String
  Church      Church? @relation(fields: [churchId], references: [id])
  churchId    String?
  Member      Member? @relation(fields: [memberId], references: [id])
  memberId    String?

  @@map("member_address")
}

model Office {
  id      String   @id @default(uuid())
  name    String   @unique
  members Member[]

  @@map("offices")
}
