generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.png"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  own_organizations Organization[]

  @@map("users")
}

model Organization {
  id          String   @id @default(uuid())
  name        String   @unique
  street      String
  number      String
  crn         String
  own_id      String
  churchs     Church[]
  responsible User?    @relation(fields: [own_id], references: [id])

  createdAt DateTime @default(now())

  @@map("organizations")
}

model Church {
  id           String   @id @default(uuid())
  name         String
  descriptions String?
  members      Member[]

  own_id          String
  organization_id String?
  organization    Organization? @relation(fields: [organization_id], references: [id])

  @@map("churchs")
}

model Member {
  id           String         @id @default(uuid())
  fullName     String
  phone        String         @unique
  street       String
  houseNumber  String
  postalCode   String
  churchId     String
  officeId     String
  church       Church         @relation(fields: [churchId], references: [id])
  office       Office         @relation(fields: [officeId], references: [id])
  memberStatus MemberStatus[]

  @@map("members")
}

enum Status {
  ACTIVE
  DELETED
  TURNEDOFF
}

model MemberStatus {
  id       String @id @default(uuid())
  memberId String

  status        Status   @default(ACTIVE)
  reason        String?
  date          DateTime @default(now())
  deactivatedBy String?

  member Member @relation(fields: [memberId], references: [id])

  @@map("memberStatus")
}

model Office {
  id      String   @id @default(uuid())
  name    String   @unique
  members Member[]

  @@map("offices")
}
